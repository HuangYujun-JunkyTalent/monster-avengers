;;;; simple-web.lisp

(in-package #:monster-avengers.simple-web)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *working-dir* "/home/breakds/tmp/")
  (defparameter *server-binary*
    (merge-pathnames "cpp/build/serve_query"
                     (asdf:system-source-directory 'monster-avengers)))
  (defparameter *dataset-path* 
    (merge-pathnames "dataset/MH4G/"
                     (asdf:system-source-directory 'monster-avengers))))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defpsmacro lang-text (&rest lang-text-pairs)
    `(funcall (lambda (language)
                (case language
                  ,@lang-text-pairs))
              (@ this props language))))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (enable-jsx-reader))

(defun json-armor-object (obj)
  (json "name" (getf obj :name)
        "holes" (getf obj :holes)
        "material" (getf obj :material)))

(def-rpc answer-query (query)
  (let ((query-file (merge-pathnames "query_cache.lsp"
                                     *working-dir*))
        (output-file (merge-pathnames "output.lsp"
                                      *working-dir*)))
    (with-open-file (cache query-file
                           :direction :output
                           :if-exists :supersede)
      (format cache "~a~%" query))
    (sb-ext:run-program (namestring *server-binary*)
                        (list (namestring *dataset-path*) 
                              (namestring query-file)
                              (namestring output-file))
                        :output *standard-output* :wait t)
    (with-open-file (input output-file
                           :direction :input)
      (loop for solution = (read input nil nil)
         while solution
         collect (json "gear" (json-armor-object (getf solution :gear))
                       "head" (json-armor-object (getf solution :head))
                       "body" (json-armor-object (getf solution :body))
                       "hands" (json-armor-object (getf solution :hands))
                       "waist" (json-armor-object (getf solution :waist))
                       "feet" (json-armor-object (getf solution :feet)))))))


(def-global-code skill-systems
  (with-open-file (in (merge-pathnames "skills.lisp"
                                       *dataset-path*)
                      :direction :input)
    `(array 
      ,@(loop for skill-system in (read in)
           collect `(create :name ,(getf skill-system :system-name)
			    :skills (array ,@(loop for skill in (getf skill-system 
								      :skills)
						when (> (getf skill :points) 0)
						collect `(create :name ,(getf skill :name)
								 :points ,(getf skill :points)))))))))

(def-widget skill-item (skill-id update-callback destructor)
    ()
  #jsx(with-slots (name skills) (aref skill-systems skill-id)
	(:li ((class-name "list-group-item"))
	     (:div ((class-name "row"))
		   (:div ((class-name "col-md-4"))
			 name)
		   (:div ((class-name "col-md-6"))
			 (:select ((class-name "form-control")
				   (on-click (lambda (e)
					       (funcall update-callback
							skill-id 
							(@ e target value)))))
				  (chain skills 
					 (map (lambda (skill id)
						(:option ((value id))
							 (@ skill name)))))))
		   (:div ((class-name "col-md-2"))
			 (:button ((class-name "btn btn-default")
				   (on-click (lambda () 
					       (funcall destructor skill-id))))
				  (:span ((class-name "glyphicon glyphicon-remove")))))))))

(def-widget skill-panel (language change-callback)
    ((state (effects (array))
	    (selected 0))
     (add-skill ()
		(funcall change-callback (local-state selected) 0)
		(let ((new-effects (local-state effects)))
		  (chain new-effects (push (local-state selected)))
		  (chain this (set-state (create effects new-effects))))
		nil)
     (remove-skill (skill-id)
		   (funcall change-callback skill-id -1)
		   (let ((new-effects (local-state effects)))
		     (setf new-effects
			   (chain new-effects (filter (lambda (e i a) 
							(!= e skill-id)))))
		     (chain this (set-state (create effects new-effects))))
		   nil))
  #jsx(:div ((class-name "panel panel-default"))
            (:div ((class-name "panel-heading"))
                  (lang-text ("en" "Skills")
                             ("zh" "技能")))
            (:ul ((class-name "list-group"))
		 (chain (local-state effects)
			(map (lambda (skill-id) 
			       (:skill-item ((skill-id skill-id)
					     (update-callback change-callback)
					     (destructor (@ this remove-skill))))))))
            (:div ((class-name "panel-body"))
                  (:div ((class-name "input-group"))
                        (:select ((class-name "form-control")
				  (on-click (lambda (e)
					      (setf (local-state selected) 
						    (@ e target value)))))
				 (chain skill-systems 
					(map (lambda (system id)
					       (:option ((value id)) (@ system name))))))
                        (:div ((class-name "input-group-btn dropdown"))
                              (:button ((class-name "btn btn-default")
					(on-click (@ this add-skill)))
                                       (lang-text ("en" "Add")
                                                  ("zh" "添加"))))))))

(def-widget parameter-panel (language callback)
    ()
  #jsx(:div ((class-name "row"))
            (:div ((class-name "col-md-2"))
                  (:div ((class-name "panel panel-default"))
                        (:div ((class-name "panel-heading"))
                              (:h3 ((class-name "panel-title"))
                                   (lang-text ("en" "Weapon Type")
                                              ("zh" "武器类型"))))
                        (:div ((class-name "panel-body"))
                              (:select ((class-name "form-control")
                                        (on-click (lambda (e)
                                                    (funcall callback "weapon-type"
                                                             (@ e target value)))))
                                       (:option ((value "melee"))
                                                (lang-text ("en" "Melee")
                                                           ("zh" "近战")))
                                       (:option ((value "range")) 
                                                (lang-text ("en" "Range")
                                                           ("zh" "远程")))))))
            (:div ((class-name "col-md-2"))
                  (:div ((class-name "panel panel-default"))
                        (:div ((class-name "panel-heading"))
                              (:h3 ((class-name "panel-title"))
                                   (lang-text ("en" "Weapon Holes")
                                              ("zh" "武器孔数"))))
                        (:div ((class-name "panel-body"))
                              (:select ((class-name "form-control")
                                        (on-click (lambda (e)
                                                    (funcall callback "weapon-holes"
                                                             (@ e target value)))))
                                       (:option ((value "0")) "---")
                                       (:option ((value "1")) "O")
                                       (:option ((value "2")) "OO")
                                       (:option ((value "3")) "OOO")))))
            (:div ((class-name "col-md-2"))
                  (:div ((class-name "panel panel-default"))
                        (:div ((class-name "panel-heading"))
                              (:h3 ((class-name "panel-title"))
                                   (lang-text ("en" "Minimum Rare")
                                              ("zh" "稀有度"))))
                        (:div ((class-name "panel-body"))
                              (:select ((class-name "form-control")
                                        (on-click (lambda (e)
                                                    (funcall callback "rare"
                                                             (@ e target value)))))
                                       (:option ((value "1")) "1")
                                       (:option ((value "2")) "2")
                                       (:option ((value "3")) "3")
                                       (:option ((value "4")) "4")
                                       (:option ((value "5")) "5")
                                       (:option ((value "6")) "6")
                                       (:option ((value "7")) "7")
                                       (:option ((value "8")) "8")
                                       (:option ((value "9")) "9")
                                       (:option ((value "10")) "10")))))))

(def-widget armor-display (part name material holes)
    ()
  #jsx(:li ((class-name "list-group-item"))
           (:div ((class-name "input-group"))
                 (:span ((class-name "input-group-addon"))
                        (:img ((src (+ "img/" part ".png"))
                               (:style :height "65%"))))
                 (:span ((class-name "input-group-addon")
                         (style :font-family "monospace"
                                :font-size "130%"))
                        (funcall (lambda (x) (case x
                                               (0 "---")
                                               (1 "o--")
                                               (2 "oo-")
                                               (3 "ooo")))
                                 holes))
                 (:input ((type "text")
                          ("data-toggle" "tooltip")
                          ("data-placement" "left")
                          (title material)
                          (style :padding-left "40px")
                          (class-name "form-control")
                          (readonly "readonly")
                          (value name))
                 (:div ((class-name "input-group-btn"))
                       (:button ((class-name "btn btn-default"))
                                (:span ((class-name "glyphicon glyphicon-remove-sign")))))))))


(def-widget armor-set-display (language armor-set)
    ()
  #jsx(:div ((class-name "panel panel-success"))
            (:div ((class-name "panel-heading"))
                  (lang-text ("en" "Armor Set")
                             ("zh" "配装组合")))
            (:ul ((class-name "list-group"))
                 (:armor-display ((part "gear")
                                  (name (@ armor-set gear name))
                                  (material "")
                                  (holes (@ armor-set gear holes))))
                 (:armor-display ((part "head")
                                  (name (@ armor-set head name))
                                  (material (@ armor-set head material))
                                  (holes (@ armor-set head holes))))
                 (:armor-display ((part "body")
                                  (name (@ armor-set body name))
                                  (material (@ armor-set body material))
                                  (holes (@ armor-set body holes))))
                 (:armor-display ((part "hands")
                                  (name (@ armor-set hands name))
                                  (material (@ armor-set hands material))
                                  (holes (@ armor-set hands holes))))
                 (:armor-display ((part "waist")
                                  (name (@ armor-set waist name))
                                  (material (@ armor-set waist material))
                                  (holes (@ armor-set waist holes))))
                 (:armor-display ((part "feet")
                                  (name (@ armor-set feet name))
                                  (material (@ armor-set feet material))
                                  (holes (@ armor-set feet holes)))))))




                 

(def-widget title-bar (language callback)
    ()
  #jsx(:div ((class-name "topbar")
             (style :width "auto"
                    :margin "auto"))
            (:div ((class-name "fill row"))
                  (:div ((class-name "col-md-4"))
                        (:div ((class-name "page-header"))
                              (:h1 () (lang-text ("en" "MH4G Armor Tool")
                                                 ("zh" "怪物猎人4G 配装器")))))
                  (:div ((class-name "col-md-2 col-md-offset-6"))
                        (:select ((class-name "form-control")
                                  (on-click (lambda (e)
                                              (funcall callback
                                                       (@ e target value)))))
                                 (:option ((value "en")) "English")
                                 (:option ((value "zh")) "中文"))))))

(def-widget app-view ()
    ((state (language "en")
            (weapon-type "melee")
            (weapon-holes 0)
            (rare 1)
	    (effects (array))
            (query-result (array)))
     (switch-language (target) 
                      (chain this (set-state (create language target))))
     (handle-query ()
                   (let ((query ""))
                     (setf query (+ query "(:weapon-type \""
                                    (local-state weapon-type) "\") "))
                     (setf query (+ query "(:weapon-holes "
                                    (local-state weapon-holes) ") "))
                     (setf query (+ query "(:rare "
                                    (local-state rare) ") "))
                     (loop for effect in (local-state effects)
                        do (setf query (+ query "(:skill "
                                          (@ effect id) " "
                                          (@ effect points) ") ")))
                     (chain console (log query))
                     (with-rpc (answer-query query)
                       (chain this (set-state (create query-result
                                                      rpc-result)))
                       (chain console (log rpc-result))))
                   nil)
     (update-parameters (param value)
                        (if (= param "weapon-type")
                            (chain this (set-state (create weapon-type value)))
                            (if (= param "weapon-holes")
                                (chain this (set-state (create weapon-holes value)))
                                (if (= param "rare")
                                    (chain this (set-state (create rare value))))))
                        nil)
     (update-effects (skill-id active-id)
		     (let ((new-effects (local-state effects)))
		       (setf new-effects
			     (chain new-effects (filter (lambda (e i a) 
							  (!= (@ e id)
							      skill-id)))))
		       (when (> active-id -1)
			 (let ((points (@ (aref (@ (aref skill-systems skill-id) skills)
						active-id) points)))
			   (chain new-effects (push (create :id skill-id
							    :points points)))))
		       (chain this (set-state (create effects new-effects))))
		     nil))
  #jsx(:div ((style :margin "20px 50px 30px 50px"))
            (:title-bar ((language (@ this state language))
                         (callback (@ this switch-language))))
            (:parameter-panel ((language (@ this state language))
                               (callback (@ this update-parameters))))
            (:div ((class-name "row"))
                  (:div ((class-name "col-md-3"))
                        (:skill-panel ((language (@ this state language))
				       (change-callback (@ this update-effects))))
                        (:button ((class-name "btn btn-default")
                                  (on-click (@ this handle-query)))
                                 "Search"))
                  (:div ((class-name "col-md-3 col-md-offset-4"))
                        (chain (local-state query-result)
                               (map (lambda (armor-set)
                                      (:armor-set-display ((language (@ this state language))
                                                           (armor-set armor-set))))))))))


(def-realispic-app (armor-tools :title "Monster Hunter's Arsenal"
                                :port 16384
                                :css ("https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/css/bootstrap.min.css")
                                :libs ("http://fb.me/react-0.12.2.min.js"
                                       "https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"
                                       "https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.min.js")
                                :document-base (merge-pathnames "assets/"
                                                                (asdf:system-source-directory 'monster-avengers)))
  #jsx(:app-view))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (disable-jsx-reader))
