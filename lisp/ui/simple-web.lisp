;;;; simple-web.lisp

(in-package #:monster-avengers.simple-web)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *working-dir* "/tmp/")
  (defparameter *server-binary*
    (merge-pathnames "cpp/build/serve_query"
                     (asdf:system-source-directory 'monster-avengers)))
  (defparameter *dataset-path* 
    (merge-pathnames "dataset/MH4G/"
                     (asdf:system-source-directory 'monster-avengers))))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defpsmacro lang-text (&rest lang-text-pairs)
    `((chain (lambda ()
               (case (@ this props language)
                 ,@lang-text-pairs))
             (bind this)))))

                           
    ;; `(funcall (@ (lambda (language)
    ;;                (case language
    ;;                  ,@lang-text-pairs))
    ;;           (@ this props language))))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (enable-jsx-reader))

(defun json-name-object (name-obj)
  (json "en" (getf (getf name-obj :name) :en)
        "jp" (getf (getf name-obj :name) :jp)))

(defun json-armor-object (obj)
  (json "name" (josn "en" (getf (getf obj :name) :en)
                     "jp" (getf (getf obj :name) :jp))
        "id" (getf obj :id)
        "holes" (getf obj :holes)
        "rare" (if (getf obj :rare)
                   (format nil "~2,'0d" (getf obj :rare))
                   "??")
        "torsoup" (getf obj :torsoup)
        "stuffed" (if (getf obj :stuffed)
                      (getf obj :stuffed)
                      0)
        "jewels" (if (getf obj :jewels)
                     (loop for jewel-plan in (getf obj :jewels)
                        collect (json "name" (getf jewel-plan :name)
                                      "num" (getf jewel-plan :quantity)))
                     nil)
        "material" (getf obj :material)))

(defun json-amulet-object (obj)
  (json "holes" (getf obj :holes)
        "id" (getf obj :id)
        "material" ""
        "rare" "??"
        "torsoup" "false"
        "stuffed" 0
        "jewels" nil
        "name" (let ((name ""))
                 (loop for effect in (getf obj :effects)
                    do (setf name (concatenate 'string name 
                                               (getf effect :name)
                                               (if (> (getf effect :points) 0)
                                                   " +" " ")
                                               (format nil "~a" (getf effect :points))
                                               "   ")))
                 name)))

(def-rpc answer-query (query)
  (let ((query-file (merge-pathnames (format nil "query_cache_~a.lsp"
                                             (hunchentoot:session-id 
                                              current-session))
                                     *working-dir*))
        (output-file (merge-pathnames (format nil "output_~a.lsp"
                                              (hunchentoot:session-id 
                                               current-session))
                                      *working-dir*)))
    (with-open-file (output output-file
                            :direction :output
                            :if-exists :supersede)
      (format output ""))
    (with-open-file (cache query-file
                           :direction :output
                           :if-exists :supersede)
      (format cache "~a~%" query))
    (sb-ext:run-program (namestring *server-binary*)
                        (list (namestring *dataset-path*) 
                              (namestring query-file)
                              (namestring output-file))
                        :output *standard-output* :wait t)
    (with-open-file (input output-file
                           :direction :input)
      (loop for solution = (read input nil nil)
         while solution
         collect (json "gear" (json-armor-object (getf solution :gear))
                       "head" (json-armor-object (getf solution :head))
                       "body" (json-armor-object (getf solution :body))
                       "hands" (json-armor-object (getf solution :hands))
                       "waist" (json-armor-object (getf solution :waist))
                       "feet" (json-armor-object (getf solution :feet))
                       "amulet" (json-amulet-object (getf solution :amulet))
                       "defense" (getf solution :defense)
                       "jewelPlans" 
                       (loop for jewel-plan in (getf solution :jewel-plans)
                          collect (json "active" (getf jewel-plan :active)
                                        "plan" (loop for jewel in 
                                                    (getf jewel-plan :plan)
                                                  collect (json "name" (getf jewel :name)
                                                                "num" (getf jewel :quantity))))))))))


(def-global-code skill-systems
  (with-open-file (in (merge-pathnames "skills.lisp"
                                       *dataset-path*)
                      :direction :input)
    `(array 
      ,@(loop for skill-system in (read in)
           collect `(create :name ,(getf skill-system :system-name)
                            en-name ,(getf skill-system :en-name)
			    :skills (array ,@(loop for skill in (getf skill-system 
								      :skills)
						when (> (getf skill :points) 0)
						collect `(create :name ,(getf skill :name)
                                                                 en-name ,(getf skill :en-name)
								 :points ,(getf skill :points)))))))))

(def-widget skill-item (language effect update-callback destructor)
    ()
  #jsx(with-slots (en-name name skills) (aref skill-systems (@ effect id))
	(:li ((class-name "list-group-item"))
	     (:div ((class-name "row"))
		   (:div ((class-name "col-md-4"))
                         (lang-text ("zh" name)
                                    ("en" en-name)))
		   (:div ((class-name "col-md-6"))
			 (:select ((class-name "form-control")
                                   (value (@ effect active))
				   (on-change (lambda (e)
                                                (funcall update-callback
                                                         (@ effect id)
                                                         (@ e target value)))))
				  (chain skills 
					 (map (lambda (skill id)
						(:option ((value id))
							 (lang-text ("zh" (@ skill name))
                                                                    ("en" (@ skill en-name)))))))))
		   (:div ((class-name "col-md-2"))
			 (:button ((class-name "btn btn-default")
				   (on-click (lambda () 
					       (funcall destructor (@ effect id)))))
				  (:span ((class-name "glyphicon glyphicon-remove")))))))))

(def-widget skill-panel (language change-callback effects)
    ((state (selected 0))
     (add-skill ()
		(funcall change-callback (local-state selected) 0)
		nil)
     (remove-skill (skill-id)
		   (funcall change-callback skill-id -1)
		   nil))
  #jsx(:div ((class-name "panel panel-default"))
            (:div ((class-name "panel-heading"))
                  (lang-text ("en" "Skills")
                             ("zh" "技能")))
            (:ul ((class-name "list-group"))
		 (chain effects
			(map (lambda (effect) 
			       (:skill-item ((effect effect)
                                             (:language language)
					     (update-callback change-callback)
					     (destructor (@ this remove-skill))))))))
            (:div ((class-name "panel-body"))
                  (:div ((class-name "input-group"))
                        (:select ((class-name "form-control")
                                  (value (local-state selected))
				  (on-change (lambda (e)
                                               (chain this 
                                                      (set-state (create 
                                                                  selected
                                                                  (@ e target value)))))))
                                 (chain skill-systems 
					(map (lambda (system id)
					       (:option ((value id)) 
                                                        (lang-text ("zh" (@ system name))
                                                                   ("en" (@ system en-name))))))))
                        (:div ((class-name "input-group-btn dropdown"))
                              (:button ((class-name "btn btn-default")
					(on-click (@ this add-skill)))
                                       (lang-text ("en" "Add")
                                                  ("zh" "添加"))))))))

(def-widget amulet-skill-panel (language skill-id skill-points slot-id callback)
    ()
  #jsx(:div ((class-name "form-inline")
             (style :margin-bottom "20px"))
            (:div ((class-name "form-group")
                   (style :margin-right "20px"))
                  (:select ((class-name "form-control")
                            (value skill-id)
                            (on-change (lambda (e)
                                         (funcall callback slot-id
                                                  "skill-id" (@ e target value)))))
                           (:option ((value "-1")) (lang-text ("en" "Blank")
                                                              ("zh" "无技能")))
                           (chain skill-systems 
                                  (map (lambda (system id)
                                         (:option ((value id)) (@ system name)))))))
            (:div ((class-name "form-group"))
                  (:select ((class-name "form-control")
                            (value skill-points)
                            (on-change (lambda (e)
                                         (funcall callback slot-id
                                                  "points" (@ e target value)))))
                           (chain (array -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 
                                         1 2 3 4 5 6 7 8 9 10 11 12 13 14
                                         15 16 17 18 19 20)
                                  (map (lambda (points)
                                         (:option ((value points))
                                                  (if (> points 0) 
                                                      (+ "+" points)
                                                      points)))))))))

(def-widget amulet-item (language amulet destructor)
    ()                    
  #jsx(:li ((class-name "list-group-item"))
           (:div ((class-name "row"))
                 (:div ((class-name "col-md-2")
                        (style :font-family "monospace"))
                       (funcall (lambda (x) (case x
                                              ("0" "---")
                                              ("1" "o--")
                                              ("2" "oo-")
                                              ("3" "ooo")))
                                (aref amulet 0)))
                 (:div ((class-name "col-md-4"))
                         (when (> (@ amulet length) 1)
                           (let ((content ""))
                             (setf content (+ content (@ (aref skill-systems 
                                                               (aref amulet 1))
                                                         name)))
                             (let ((points (aref amulet 2)))
                               (setf content (+ content (if (> points 0) 
                                                            (+ " +" points)
                                                            (+ " " points)))))
                             content)))
                 (:div ((class-name "col-md-4"))
                       (let ((content ""))
                         (when (> (@ amulet length) 3)
                           (setf content (+ content (@ (aref skill-systems 
                                                             (aref amulet 3))
                                                       name)))
                           (let ((points (aref amulet 4)))
                             (setf content (+ content (if (> points 0) 
                                                          (+ " +" points)
                                                          (+ " " points)))))
                           content)))
                 (:div ((class-name "col-md-2"))
                       (:button ((class-name "btn btn-default btn-xs")
                                 (on-click (lambda () 
                                             (funcall destructor amulet))))
                                (:span ((class-name "glyphicon glyphicon-remove"))))))))

(def-widget amulet-panel (language callback amulets)
    ((state (holes "0")
            (skill-points-a 0)
            (skill-points-b 0)
            (skill-id-a -1)
            (skill-id-b -1))
     (add-amulet ()
                 (let ((amulet (array)))
                   (chain amulet (push (local-state holes)))
                   (when (and (!= (local-state skill-points-a) 0)
                              (!= (local-state skill-id-a) -1))
                     (chain amulet (push (local-state skill-id-a)))
                     (chain amulet (push (local-state skill-points-a))))
                   (when (and (!= (local-state skill-points-b) 0)
                              (!= (local-state skill-id-b) -1))
                     (chain amulet (push (local-state skill-id-b)))
                     (chain amulet (push (local-state skill-points-b))))
                   (when (or (> (@ amulet length) 1)
                             (> (aref amulet 0) 0))
                     (let ((new-amulets amulets))
                       (chain new-amulets (push amulet)))
                     (funcall callback new-amulets))))
     (stringify (amulet)
                (let ((result ""))
                  (loop for x in amulet
                     do (setf result (+ result "," x)))
                  result))
     (remove-amulet (amulet)
                    (let ((new-amulets 
                           (chain amulets
                                  (filter (lambda (e index a)
                                            (!= (stringify e)
                                                (stringify amulet)))))))
                      (funcall callback new-amulets))
                    nil)
     (handle-holes (holes)
                   (chain this (set-state (create holes holes)))
                   nil)
     (handle-change (slot-id type value)
                    (if (= type "points")
                        (if (= slot-id "a")
                            (chain this (set-state (create skill-points-a value)))
                            (chain this (set-state (create skill-points-b value))))
                        (if (= slot-id "a")
                            (chain this (set-state (create skill-id-a value)))
                            (chain this (set-state (create skill-id-b value)))))
                    nil))
  #jsx(:div ((class-name "panel panel-default"))
            (:div ((class-name "panel-heading"))
                  (lang-text ("en" "Amulets")
                             ("zh" "护石")))
            (:ul ((class-name "list-group"))
                 (chain amulets
                        (map (lambda (amulet)
                               (:amulet-item ((:language language)
                                              (:destructor (@ this remove-amulet))
                                              (:amulet amulet)))))))
            (:div ((class-name "panel-body"))
                  (:label () (lang-text ("en" "Skill A")
                                        ("zh" "技能 1")))
                  (:amulet-skill-panel ((:language language)
                                        (skill-id (local-state skill-id-a))
                                        (skill-points (local-state skill-points-a))
                                        (slot-id "a")
                                        (:callback (@ this handle-change))))
                  (:label () (lang-text ("en" "Skill B")
                                        ("zh" "技能 2")))
                  (:amulet-skill-panel ((:language language)
                                        (skill-id (local-state skill-id-b))
                                        (skill-points (local-state skill-points-b))
                                        (slot-id "b")
                                        (:callback (@ this handle-change))))
                  (:label () (lang-text ("en" "Slots")
                                        ("zh" "护石孔数")))
                  (:select ((class-name "form-control")
                            (value (local-state holes))
                            (style :margin-bottom "20px")
                            (on-change (lambda (e)
                                         (funcall (@ this handle-holes)
                                                  (@ e target value)))))
                           (:option ((value "0")) "---")
                           (:option ((value "1")) "O")
                           (:option ((value "2")) "OO")
                           (:option ((value "3")) "OOO"))
                  (:button ((class-name "btn btn-default")
                            (on-click (@ this add-amulet)))
                           (lang-text ("en" "Add")
                                      ("zh" "添加"))))))

(def-widget slots-text (holes occupied)
    ()
  #jsx(:div () 
            (chain (array 0 1 2)
                   (map (lambda (i)
                          (if (< i holes)
                              (if (< i occupied)
                                  (:span ((style :border-radius "50%"
                                                 :background "#000"
                                                 :display "inline-block"
                                                 :margin-right "2px"
                                                 :width "12px"
                                                 :height "12px")))
                                  (:span ((style :border-radius "50%"
                                                 :border "1px solid #000"
                                                 :display "inline-block"
                                                 :margin-right "2px"
                                                 :width "12px"
                                                 :height "12px"))))
                              (:span ((style :border "1px solid #000"
                                             :display "inline-block"
                                             :margin-left "2px"
                                             :margin-right "2px"
                                             :margin-bottom "5px"
                                             :width "8px"
                                             :height "1px")))))))))


(def-widget armor-display (language part armor appender filter)
    ((state (expanded false)))
  #jsx(:tr ()
           (:td ((style :text-align "center")) 
                (:img ((src (+ "img/" part ".png"))
                       (style :height "20px"))))
           (:td ((style :font-family "monospace"
                        :text-align "center"))
                (@ armor rare))
           (:td ((style :text-align "center")) 
                (:button ((class-name "btn btn-default btn-xs")
                          ("data-toggle" "collapse")
                          ("data-placement" "left")
                          (title (@ armor material))
                          (on-click (lambda () 
                                      (let ((original (local-state expanded)))
                                        (chain this (set-state 
                                                     (create expanded (not original))))))))
                         (if (= "" (@ armor name))
                             "----------"
                             (@ armor name)))
                (when (and (local-state expanded)
                           (!= part "gear")
                           (!= part "amulet"))
                  (:div ((style :margin-top "3px"))
                        (:div () (@ armor name))
                        (:div ()
                              (lang-text ("en" "Filter this out: ")
                                         ("zh" "过滤掉包含此装备的配装: "))
                              (:button ((class-name "btn btn-default btn-xs")
                                        (on-click (lambda ()
                                                    (funcall appender (@ armor id))
                                                    (funcall filter true))))
                                       (:span ((class-name "glyphicon glyphicon-remove-sign"))))))))
           (:td ((style :text-align "center")) 
                (:slots-text ((holes (@ armor holes))
                              (occupied (@ armor stuffed)))))
           (:td ((style :text-align "center"))
                (if (= "true" (@ armor torsoup))
                    "胴系统倍加"
                    (chain (@ armor jewels)
                           (map (lambda (jewel)
                                  (+ (@ jewel name)
                                     " x "
                                     (@ jewel num))))
                           (join ", "))))))


(def-widget armor-set-display (language armor-set blacklist-callback filter-callback)
    ((state (jewel-plan-id 0))
     (switch-jewel-plan (id)
                        (chain this (set-state (create jewel-plan-id
                                                       id)))))
  #jsx(:div ((class-name "panel panel-success"))
            (:div ((class-name "panel-heading"))
                  (+ (lang-text ("en" "Armor Set")
                                ("zh" "配装组合"))
                     " - "
                     (lang-text ("en" "Defense: " )
                                ("zh" "防御力: "))
                     (@ armor-set defense)))
            (:table ((class-name "table"))
                    (:tr ()
                         (:th ((class-name "col-md-1")
                               (style :text-align "center")) 
                              "")
                         (:th ((class-name "col-md-1")
                               (style :text-align "center"))
                              (lang-text ("en" "Rare")
                                         ("zh" "稀有度")))
                         (:th ((class-name "col-md-5")
                               (style :text-align "center"))
                              (lang-text ("en" "Armor")
                                         ("zh" "装备名称")))
                         (:th ((class-name "col-md-1")
                               (style :text-align "center")) 
                              (lang-text ("en" "Slots")
                                         ("zh" "装饰珠槽")))
                         (:th ((class-name "col-md-4")
                               (style :text-align "center")) 
                              (lang-text ("en" "Notes")
                                         ("zh" "备注"))))
                    (:armor-display ((part "gear")
                                     (:language language)
                                     (appender blacklist-callback)
                                     (filter filter-callback)
                                     (armor (@ armor-set gear))))
                    (:armor-display ((part "head")
                                     (:language language)
                                     (appender blacklist-callback)
                                     (filter filter-callback)
                                     (armor (@ armor-set head))))
                    (:armor-display ((part "body")
                                     (:language language)
                                     (appender blacklist-callback)
                                     (filter filter-callback)
                                     (armor (@ armor-set body))))
                    (:armor-display ((part "hands")
                                     (:language language)
                                     (appender blacklist-callback)
                                     (filter filter-callback)
                                     (armor (@ armor-set hands))))
                    (:armor-display ((part "waist")
                                     (:language language)
                                     (appender blacklist-callback)
                                     (filter filter-callback)
                                     (armor (@ armor-set waist))))
                    (:armor-display ((part "feet")
                                     (:language language)
                                     (appender blacklist-callback)
                                     (filter filter-callback)
                                     (armor (@ armor-set feet))))
                    (:armor-display ((part "amulet")
                                     (:language language)
                                     (appender blacklist-callback)
                                     (filter filter-callback)
                                     (armor (@ armor-set amulet)))))
            (:div ((class-name "panel-body"))
                  (:div ()
                        (:nav () 
                              (:ul ((class-name "pagination"))
                                   (:li ((class-name "disabled"))
                                        (:a ()
                                            (lang-text ("en" "Decorations Plan")
                                                       ("zh" "装饰珠方案"))))
                                   (chain (@ armor-set jewel-plans)
                                          (map (lambda (x id)
                                                 (if (= id (local-state jewel-plan-id))
                                                     (:li ((class-name "active")
                                                           (on-click 
                                                            (lambda ()
                                                              (funcall (@ this switch-jewel-plan)
                                                                       id))))
                                                          (:a () (1+ id)))
                                                     (:li ((on-click 
                                                            (lambda ()
                                                              (funcall (@ this switch-jewel-plan)
                                                                       id))))
                                                          (:a () (1+ id))))))))))
                  (:p () (let ((content (lang-text ("en" "Active: ")
                                                   ("zh" "发动技能: ")))
                               (skills (@ (aref (@ armor-set jewel-plans)
                                                (local-state jewel-plan-id))
                                          active)))
                           (loop for skill in skills
                              do (setf content (+ content skill "  |  ")))
                           content))
                  (:div () (let ((plan (@ (aref (@ armor-set jewel-plans)
                                                (local-state jewel-plan-id))
                                          plan)))
                             (chain plan 
                                    (map (lambda (x)
                                           (:div () (:span ((class-name "label label-warning"))
                                                           (@ x name) " x " (@ x num)))))))))))

(def-widget parameter-panel (language weapon-type weapon-holes rare callback)
    ()
  #jsx(:div ((class-name "row"))
            (:div ((class-name "col-md-2"))
                  (:div ((class-name "panel panel-default"))
                        (:div ((class-name "panel-heading"))
                              (:h3 ((class-name "panel-title"))
                                   (lang-text ("en" "Weapon Type")
                                              ("zh" "武器类型"))))
                        (:div ((class-name "panel-body"))
                              (:select ((class-name "form-control")
                                        (value weapon-type)
                                        (on-change (lambda (e)
                                                     (funcall callback "weapon-type"
                                                              (@ e target value)))))
                                       (:option ((value "melee"))
                                                (lang-text ("en" "Melee")
                                                           ("zh" "近战")))
                                       (:option ((value "range")) 
                                                (lang-text ("en" "Range")
                                                           ("zh" "远程")))))))
            (:div ((class-name "col-md-2"))
                  (:div ((class-name "panel panel-default"))
                        (:div ((class-name "panel-heading"))
                              (:h3 ((class-name "panel-title"))
                                   (lang-text ("en" "Weapon Slots")
                                              ("zh" "武器孔数"))))
                        (:div ((class-name "panel-body"))
                              (:select ((class-name "form-control")
                                        (value weapon-holes)
                                        (on-change (lambda (e)
                                                     (funcall callback "weapon-holes"
                                                              (@ e target value)))))
                                       (:option ((value "0")) "---")
                                       (:option ((value "1")) "O")
                                       (:option ((value "2")) "OO")
                                       (:option ((value "3")) "OOO")))))
            (:div ((class-name "col-md-2"))
                  (:div ((class-name "panel panel-default"))
                        (:div ((class-name "panel-heading"))
                              (:h3 ((class-name "panel-title"))
                                   (lang-text ("en" "Minimum Rare")
                                              ("zh" "稀有度"))))
                        (:div ((class-name "panel-body"))
                              (:select ((class-name "form-control")
                                        (value rare)
                                        (on-change (lambda (e)
                                                     (funcall callback "rare"
                                                              (@ e target value)))))
                                       (:option ((value "1")) "1")
                                       (:option ((value "2")) "2")
                                       (:option ((value "3")) "3")
                                       (:option ((value "4")) "4")
                                       (:option ((value "5")) "5")
                                       (:option ((value "6")) "6")
                                       (:option ((value "7")) "7")
                                       (:option ((value "8")) "8")
                                       (:option ((value "9")) "9")
                                       (:option ((value "10")) "10")))))))

(def-widget title-bar (language callback)
    ()
  #jsx(:div ((class-name "topbar")
             (style :width "auto"
                    :margin "auto"))
            (:div ((class-name "fill row"))
                  (:div ((class-name "col-md-6"))
                        (:div ((class-name "page-header"))
                              (:h1 () (lang-text ("en" "MH4G Armor Tool")
                                                 ("zh" "怪物猎人4G 配装器")))))
                  (:div ((class-name "col-md-2 col-md-offset-4"))
                        (:select ((class-name "form-control")
                                  (value language)
                                  (on-change (lambda (e)
                                               (funcall callback
                                                        (@ e target value)))))
                                 (:option ((value "en")) "English (英文)")
                                 (:option ((value "zh")) "中文 (Chinese)"))))))

(def-widget tab-panel (language pages callback active-page)
    ()
  #jsx(:div ((style :margin-bottom "20px"))
            (:ul ((class-name "nav nav-pills"))
                 (chain pages 
                        (map (lambda (page)
                               (:li ((class-name 
                                      (if (= (@ page name) active-page) 
                                          "active" "")))
                                    (:a ((href "#")
                                         (on-click (lambda () 
                                                     (funcall callback (@ page name)))))
                                        (lang-text ("en" (@ page en))
                                                   ("zh" (@ page zh)))))))))))

(def-widget query-fail-alert (language)
    ()
  #jsx(:div ((class-name "alert alert-info"))
            (lang-text ("en" "Your query does not return anything.")
                       ("zh" "没有找到满足条件的配装."))))

(def-widget in-progress-alert (language)
    ()
  #jsx(:div ((class-name "alert alert-warning"))
            (lang-text ("en" "Search in progress ...")
                       ("zh" "搜索中，请稍候 ..."))))


(def-widget info-panel (language)
    ()
  #jsx(:div ()
            (:p () "Built by "
                (:a ((href "https://github.com/breakds")) "BreakDS")
                ", with "
                (:a ((href "https://github.com/breakds/realispic")) "reaLISPic")
                ", "
                (:a ((href "http://www.sbcl.org")) "SBCL")
                " and "
                (:a ((href "http://getbootstrap.com/")) "Twitter Bootstrap")
                ".")
            (:p () "Credit to "
                (:a ((href "http://wiki.mh4g.org/"))
                    "wiki.mh4g.org")
                " for armor data.")
            (:p () "Deisgn and artwork by Cassandra Qi.")))

(def-widget help-item (language name title)
    ()
  #jsx(:div ((class-name "panel panel-default"))
            (:div ((class-name "panel-heading")
                   (role "tab")
                   (id (+ "help-" name "-heading")))
                  (:h3 ((class-name "panel-title"))
                       (:a (("data-toggle" "collapse")
                            ("data-parent" "#help-group")
                            (href (+ "#" name "-gif"))
                            ("aria-expanded" "true")
                            ("aria-controls" "search-gif"))
                           title)))
            (:div ((class-name "panel-collapse collapse")
                   (id (+ name "-gif"))
                   (role "tabpanel")
                   ("aria-labeledby" (+ "help-" name "-heading")))
                  (:div ((class-name "panel-body"))
                        (:img ((src (+ "img/" name ".gif"))
                               (style :width "90%"
                                      :margin-left "5%")))))))

(def-widget help-panel (language)
    ()
  #jsx(:div ((class-name "panel-group")
             (id "help-group")
             (role "tablist")
             ("aria-multiselectable" "true"))
            (:help-item ((:language language)
                         (name "set_parameter")
                         (title (lang-text ("en" "Set Parameters")
                                           ("zh" "设置参数")))))
            (:help-item ((:language language)
                         (name "add_amulet")
                         (title (lang-text ("en" "Add Amulets")
                                           ("zh" "添加/删除 护石")))))
            (:help-item ((:language language)
                         (name "add_skills")
                         (title (lang-text ("en" "Add/Remove Skills")
                                           ("zh" "添加/删除 技能")))))
            (:help-item ((:language language)
                         (name "search")
                         (title (lang-text ("en" "Performing Search")
                                           ("zh" "搜索并浏览结果")))))
            (:help-item ((:language language)
                         (name "result")
                         (title (lang-text ("en" "View and Filtering Results")
                                           ("zh" "查看/过滤 搜索结果")))))))


(def-widget app-view (default-language)
    ((state (language (if default-language
                          default-language
                          "zh"))
            (weapon-type "melee")
            (weapon-holes 0)
            (rare 1)
            (current-page "search")
            (amulets (array))
            (effects (array))
            (blacklist (array))
            (query-fail false)
            (query-result (array))
            (in-progress false))
     (switch-language (target) 
                      (chain this (set-state (create language target))))
     (append-blacklist (id)
                       (let ((new-blacklist (local-state blacklist)))
                         (chain new-blacklist (push id))
                         (chain this (set-state (create blacklist
                                                        new-blacklist))))
                       nil)
     (handle-query (is-filter)
                   (let ((query ""))
                     (setf query (+ query "(:weapon-type \""
                                    (local-state weapon-type) "\") "))
                     (setf query (+ query "(:weapon-holes "
                                    (local-state weapon-holes) ") "))
                     (setf query (+ query "(:rare "
                                    (local-state rare) ") "))
                     (loop for effect in (local-state effects)
                        do (setf query (+ query "(:skill "
                                          (@ effect id) " "
                                          (@ effect points) ") ")))
                     (loop for amulet in (local-state amulets)
                        do (progn (setf query (+ query "(:amulet " 
                                                 (aref amulet 0)
                                                 " ("))
                                  (when (> (@ amulet length) 1)
                                    (setf query (+ query (aref amulet 1)))
                                    (loop for i from 2 below (@ amulet length)
                                       do (setf query (+ query " "
                                                         (aref amulet i)))))
                                  (setf query (+ query ")) "))))
                     ;; blacklist
                     (when (not is-filter)
                       (chain this (set-state (create blacklist (array)))))
                     (when (and (> (@ (local-state blacklist) length) 0)
                                is-filter)
                       (setf query (+ query "(:blacklist ("
                                      (aref (local-state blacklist) 0)))
                       (loop for i from 1 
                          below (@ (local-state blacklist) length)
                          do (setf query (+ query " " 
                                            (aref (local-state blacklist) i))))
                       (setf query (+ query ")) ")))
                     (chain console (log query))
                     (chain this (set-state (create in-progress true
                                                    query-result (array))))
                     (with-rpc (answer-query query)
                       (chain this (set-state (create query-result rpc-result
                                                      in-progress false
                                                      query-fail (<= (@ rpc-result length) 0))))
                       (funcall (@ this switch-page) "result")
                       (chain console (log rpc-result))))
                   nil)
     (update-parameters (param value)
                        (if (= param "weapon-type")
                            (chain this (set-state (create weapon-type value)))
                            (if (= param "weapon-holes")
                                (chain this (set-state (create weapon-holes value)))
                                (if (= param "rare")
                                    (chain this (set-state (create rare value))))))
                        nil)
     (update-amulets (new-amulets)
                     (chain this (set-state (create amulets new-amulets)))
                     nil)
     (update-effects (skill-id active-id)
		     (let ((new-effects (local-state effects)))
		       (setf new-effects
			     (chain new-effects (filter (lambda (e i a) 
							  (!= (@ e id)
							      skill-id)))))
		       (when (> active-id -1)
			 (let ((points (@ (aref (@ (aref skill-systems skill-id) skills)
						active-id) points)))
			   (chain new-effects (push (create :id skill-id
                                                            :active active-id
							    :points points)))))
		       (chain this (set-state (create effects new-effects))))
		     nil)
     (switch-page (page)
                  (chain this (set-state (create current-page page)))
                  nil))
  #jsx(:div ((style :margin "20px 50px 30px 50px"))
            (:title-bar ((language (@ this state language))
                         (callback (@ this switch-language))))
            (:tab-panel ((pages (array (create name "search" 
                                               en "Search"
                                               zh "搜索页面")
                                       (create name "result"
                                               en "Result"
                                               zh "配装结果")
                                       (create name "help"
                                               en "Help"
                                               zh "帮助")))
                         (language (local-state language))
                         (callback (@ this switch-page))
                         (active-page (local-state current-page))))
            (if (= (local-state current-page) "search")
                (:div ()
                      (:parameter-panel ((language (@ this state language))
                                         (weapon-type (local-state weapon-type))
                                         (weapon-holes (local-state weapon-holes))
                                         (rare (local-state rare))
                                         (callback (@ this update-parameters))))
                      (:div ((class-name "row"))
                            (:div ((class-name "col-md-3"))
                                  (:amulet-panel ((:language (local-state language))
                                                  (:amulets (local-state amulets))
                                                  (:callback (@ this update-amulets))))
                                  (:info-panel ((:language (local-state language)))))
                            (:div ((class-name "col-md-3"))
                                  (:skill-panel ((language (local-state language))
                                                 (effects (local-state effects))
                                                 (change-callback (@ this update-effects))))
                                  (:button ((class-name "btn btn-primary")
                                            (disabled (local-state in-progress))
                                            (on-click (lambda () 
                                                        (funcall (@ this handle-query) false)
                                                        nil)))
                                           (if (local-state in-progress)
                                               (if (= (local-state "language") "en")
                                                   "Working..."
                                                   "执行中...")
                                               (if (= (local-state "language") "en")
                                                   "Search"
                                                   "搜索"))))))
                (if (= (local-state current-page) "result")
                    (:div ((class-name "row"))
                          (:div ((class-name "col-md-6"))
                                (cond ((local-state query-fail)
                                       (:query-fail-alert ((:language (local-state language)))))
                                      ((local-state in-progress)
                                       (:in-progress-alert ((:language (local-state language)))))
                                      (t (chain (local-state query-result)
                                                (map (lambda (armor-set)
                                                       (:armor-set-display 
                                                        ((language (@ this state language))
                                                         (blacklist-callback (@ this append-blacklist))
                                                         (filter-callback (@ this handle-query))
                                                         (armor-set armor-set))))))))))
                    (:div ((class-name "row"))
                          (:div ((class-name "col-md-6"))
                                (:help-panel ((language (local-state language))))))))))


                   

(def-realispic-app (armor-tools (lang) 
                                :title "Monster Hunter's Arsenal"
                                :port 16384
                                :css ("https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/css/bootstrap.min.css")
                                :libs ("http://fb.me/react-0.12.2.min.js"
                                       "https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"
                                       "https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.min.js")
                                :document-base (merge-pathnames "assets/"
                                                                (asdf:system-source-directory 'monster-avengers)))
  #jsx(:app-view ((default-language lang))))


(eval-when (:compile-toplevel :load-toplevel :execute)
  (disable-jsx-reader))
